;;;;Justin Brown
;;;;PLT Spring 2016


;;; Evaluates the last element of a list, L
(defun myLast (L)
    (car (reverse L))
)



;;; Evaluates the number of occurrances of x in L
(defun myCount (x L)
  (cond 
    ((null L) 0)
    ((eq (car L) x) (+ 1 (myCount x (cdr L))))
    (t (myCount x (cdr L))))
)



;;; Evaluates to true if x is in list L, false otherwise
(defun myMember (x L)
  (cond
    ((null L) nil)
    ((eq (car L) x) t)
    (t (myMember x (cdr L))))
)



;;; Evaluates to a list with all elements of L without repetition
(defun myPurge (L)
  (if (not (eq L nil))
      (if (not (> (myCount (car L) L) 1))
        (cons (car L) (myPurge (cdr L)))
        (myPurge (cdr L))
      )
    )
)



;;; Evalutes to a list of elements that are common between L1 and L2
(defun myCommon (L1 L2)
  (if (not (eq L1 nil))
    (if (myMember (car L1) L2)
      (cons (car L1) (myCommon (cdr L1) L2))
      (myCommon (cdr L1) L2)
    )
  )
)



;;; Given integers X, Y and Z, evaluates to the list of increasing integers,
;;; between X and Y inclusive, with Z as the increment ( or to  nil  if such
;;; list does not exist )
(defun myGen (x y z)
  (cond 
    ((< x y) (cons x (myGen (+ x z) y z)))
    ((eq x y) (cons x ()))
    (t nil))
)



;;; Evaluates to the list which results from applying function F to every
;;; element of list L
(defun myMap (F L)
  (cons (funcall F (car L)) 
  (if (not (eq (cdr L) nil))
    (myMap F (cdr L))
    ()))
)



;;; Evaluates to the the results of applying aggregate function F to the
;;; elements of L. L will be of size >= 2. F will be a commutative function.
(defun myReduce (F L)
  (if (not (eq (cddr L) nil))
    (funcall F (car L) (myReduce F (cdr L)))
    (funcall F (car L) (myLast L))
  )
)


(print (myCommon '(p a e g b c d h) '(a q r e b c d h)))
