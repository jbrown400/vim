# This is where you build your AI for the Chess game.

from joueur.base_ai import BaseAI
import random
import copy
class AI(BaseAI):
    """ The basic AI functions that are the same between games. """
    king = None

    def get_name(self):
        """ This is the name you send to the server so your AI will control the player named this string.

        Returns
            str: The name of your Player.
        """

        return "Chess Python Player" # REPLACE THIS WITH YOUR TEAM NAME



    def start(self):
        """ This is called once the game starts and your AI knows its playerID and game. You can initialize your AI here.
        """
        
        # replace with your start logic

        for x in self.player._pieces:
            if(x.type == "King"):
                AI.king = x


    def game_updated(self):
        """ This is called every time the game's state updates, so if you are tracking anything you can update it here.
        """

        # replace with your game updated logic




    def end(self, won, reason):
        """ This is called when the game ends, you can clean up your data and dump files here if need be.

        Args:
            won (bool): True means you won, False means you lost.
            reason (str): The human readable string explaining why you won or lost.
        """

        # replace with your end logic



    def run_turn(self):
        """ This is called every time it is this AI.player's turn.

        Returns:
            bool: Represents if you want to end your turn. True means end your turn, False means to keep your turn going and re-call this function.
        """

        # Here is where you'll want to code your AI.

        # We've provided sample code that:
        #    1) prints the board to the console
        #    2) prints the opponent's last move to the console
        #    3) prints how much time remaining this AI has to calculate moves
        #    4) makes a random (and probably invalid) move.

        # 1) print the board to the console
        for f in range(9, -2, -1): # iterate through the file in reverse order
            output = ""
            if f == 9 or f == 0: # then the top or bottom of the board
                output = "   +------------------------+"
            elif f == -1: # then show the ranks
                output = "     a  b  c  d  e  f  g  h"
            else: # board
                output = " " + str(f) + " |"
                # fill in all the ranks with pieces at the current rank
                for rankOffset in range(0, 8):
                    r = chr(ord("a") + rankOffset) # start at a, with with rank offset increasing the char
                    currentPiece = None
                    for piece in self.game.pieces:
                        if piece.rank == f and piece.file == r: # then we found the piece at (rank, file)
                            currentPiece = piece
                            break

                    code = "." # default "no piece"
                    if currentPiece:
                        code = currentPiece.type[0] # the code will be the first character of their type, e.g. 'Q' for "Queen"

                        if currentPiece.type == "Knight": # 'K' is for "King", we use 'N' for "Knights"
                            code = "N"

                        if currentPiece.owner.id == "1": # the second player (black) is lower case. Otherwise it's upppercase already
                            code = code.lower()

                    output += " " + code + " "

                output += "|"

            print(output)

        # 2) print the opponent's last move to the console
        if len(self.game.moves) > 0:
            print("Opponent's Last Move: '" + self.game.moves[-1].san + "'")

        # 3) print how much time remaining this AI has to calculate moves
        print("Time Remaining: " + str(self.player.time_remaining) + " ns")

        # 4) make a random (and probably invalid) move.
        possibleMoves = []
        king = AI.king
        # Generate all possible moves for that turn 
        for p in self.player.pieces:
            if(p.type == "Pawn"):
                # Check to see if moving that piece will result in check
                if(AI.checkMove(p, self, king)):
                    possibleMoves.extend(AI.movePawn(p, self))
            elif(p.type == "Rook"):
                if(AI.checkMove(p, self, king)):
                    possibleMoves.extend(AI.moveRook(p, self))
            elif(p.type == "Knight"):
                if(AI.checkMove(p, self, king)):
                    possibleMoves.extend(AI.moveKnight(p, self))
            elif(p.type == "Bishop"):
                if(AI.checkMove(p, self, king)):
                    possibleMoves.extend(AI.moveBishop(p, self))
            elif(p.type == "King"):
                # King will check its moves in its move function
                # k will be used if king is in check
                k = AI.moveKing(king, self)
                possibleMoves.extend(k)
            elif(p.type == "Queen"):
                if(AI.checkMove(p, self, king)):
                    possibleMoves.extend(AI.moveQueen(p, self))

        # Check for check
        if(self.player.in_check is True):
            # Identify all of opponents moves
            otherMoves = []
            for o in self.player.other_player.pieces:
                if(o.type == "Pawn"):
                    otherMoves.extend(AI.movePawn(o, self, o._id))
                elif(o.type == "Rook"):
                    otherMoves.extend(AI.moveRook(o, self, o._id))
                elif(o.type == "Knight"):
                    otherMoves.extend(AI.moveKnight(o, self, o._id))
                elif(o.type == "Bishop"):
                    otherMoves.extend(AI.moveBishop(o, self, o._id))
                elif(o.type == "King"):
                    otherMoves.extend(AI.moveKing(o, self, o._id))
                elif(o.type == "Queen"):
                    otherMoves.extend(AI.moveQueen(o, self, o.id))
            
            if(k):
                my_move = random.choice(k)
                print("King to ", my_move[1], my_move[2])
                king.move(my_move[1], my_move[2])
            else:
                # If you can't move the king, try attacking that piece
                pass
            
        else:
            my_move = random.choice(possibleMoves)
            the_piece = 0
            for x in self.player.pieces:
                if(x.id == my_move[0]):
                    the_piece = x
            # Print the output in the desired format
            print(the_piece.type, " at", the_piece.file, the_piece.rank)
            for x in possibleMoves:
                if(the_piece.id == x[0]):
                    print(x)
            print("The move: ", my_move[1], my_move[2])
            the_piece.move(my_move[1], my_move[2], "Queen")

        return True  # to signify we are done with our turn.


        '''Later, take the other_player.peices check and put it into a list I 
            pass each turn so I don't have to keep checking that and it'll clean 
            up the code '''

    def movePawn(p, self, skip=""):
        pawnMoves = []
        found = False

        if(p.owner.color == "Black"):
            v = -1
        elif(p.owner.color == "White"):
            v = 1
        # Check attack
        if(any((chr(ord(p.file) + 1) + str(p.rank + v)) == (x.file + str(x.rank)) for x in self.player.other_player.pieces)):
            pawnMoves.append([p.id, chr(ord(p.file) + 1), p.rank + v])
        if(any((chr(ord(p.file) - 1) + str(p.rank + v)) == (x.file + str(x.rank)) for x in self.player.other_player.pieces)):
            pawnMoves.append([p.id, chr(ord(p.file) - 1), p.rank + v])
        # Check for moves
        if(p.has_moved is False):
            # 2 spaces if haven't moved yet
            move_size = 2
        else:
            move_size = 1
        # Prevent moving onto another pawn
        for m in range(1, move_size + 1):
            for q in self.game.players:
                for w in q.pieces:
                    if(w.file == p.file and w.rank == p.rank + (m*v)):
                        found = True
                        break
            if(found is True):
                break
            else:
                pawnMoves.append([p.id, p.file, p.rank + (m*v)])

        return pawnMoves

    def moveRook(p, self, skip=""):
        rookMoves = []
        # These values will stop checking that direction if they find a like
        # colored piece
        Up = True
        Down = True
        Right = True
        Left = True
        move_size = 8
        for m in range(1, move_size):
            # Check to see if any of your own pieces are in the way
            for w in p.owner.pieces:
                # if there is not a conflicting piece
                # Check for moving "Up" and not running into own color pieces
                if(p.rank + m < 9):
                    if(w.file == p.file and w.rank == p.rank + m):
                        Up = False
                else:
                    Up = False
                # Check for moving "Down" and not running into own color pieces
                if(p.rank - m > 0):
                    if(w.file == p.file and w.rank == p.rank - m):
                        Down = False
                else:
                    Down = False
                # Check for moving "Right" and not running into own color pieces
                if(chr(ord(p.file) + m) < "i"):
                    if(w.file == chr(ord(p.file) + m) and w.rank == p.rank):
                        Right = False
                else:
                    Right = False
                # Chcek for moving "Left" and not running into own color peices
                if(chr(ord(p.file) - m) > "`"):
                    if(w.file == chr(ord(p.file) - m) and w.rank == p.rank):
                        Left = False
                else:
                    Left = False

            if(Up is True):
                rookMoves.append([p.id, p.file, p.rank + m])
                if(any((chr(ord(p.file)) + str(p.rank + m)) == (x.file + str(x.rank)) for x in self.player.other_player.pieces)):
                    Up = False
            if(Down is True):
                rookMoves.append([p.id, p.file, p.rank - m])
                if(any((chr(ord(p.file)) + str(p.rank - m)) == (x.file + str(x.rank)) for x in self.player.other_player.pieces)):
                    Down = False
            if(Right is True):
                rookMoves.append([p.id, chr(ord(p.file) + m), p.rank])
                if(any((chr(ord(p.file) + m) + str(p.rank)) == (x.file + str(x.rank)) for x in self.player.other_player.pieces)):
                    Right = False
            if(Left is True):
                rookMoves.append([p.id, chr(ord(p.file) - m), p.rank])
                if(any((chr(ord(p.file) - m) + str(p.rank)) == (x.file + str(x.rank)) for x in self.player.other_player.pieces)):
                    Left = False

        return rookMoves

    def moveKnight(p, self, skip=""):
        knightMoves = []
        # No need to have a stopping vairable b/c knights don't have directional
        # range of moves.
        # Up 1, Right 2
        # If the move would be on the board
        if(p.rank + 1 < 9 and chr(ord(p.file) + 2) < "i"):
            # If a like colored piece is not there
            if(not(any((chr(ord(p.file) + 2) + str(p.rank + 1)) == (x.file + str(x.rank)) for x in self.player.pieces))):
                knightMoves.append([p.id, chr(ord(p.file) + 2), p.rank + 1])

        # Up 2, Right 1
        if(p.rank + 2 < 9 and chr(ord(p.file) + 1) < "i"):
            if(not(any((chr(ord(p.file) + 1) + str(p.rank + 2)) == (x.file + str(x.rank)) for x in self.player.pieces))):
                knightMoves.append([p.id, chr(ord(p.file) + 1), p.rank + 2])

        # Down 1, Right 2
        if(p.rank - 1 > 0 and chr(ord(p.file) + 2) < "i"):
            if(not(any((chr(ord(p.file) + 2) + str(p.rank - 1)) == (x.file + str(x.rank)) for x in self.player.pieces))):
                knightMoves.append([p.id, chr(ord(p.file) + 2), p.rank - 1])

        # Down 2, Right 1
        if(p.rank - 2 > 0 and chr(ord(p.file) + 1) < "i"):
            if(not(any((chr(ord(p.file) + 1) + str(p.rank - 2)) == (x.file + str(x.rank)) for x in self.player.pieces))):
                knightMoves.append([p.id, chr(ord(p.file) + 1), p.rank - 2])

        # Down 1, Left 2
        if(p.rank - 1 > 0 and chr(ord(p.file) - 2) > "`"):
            if(not(any((chr(ord(p.file) - 2) + str(p.rank - 1)) == (x.file + str(x.rank)) for x in self.player.pieces))):
                knightMoves.append([p.id, chr(ord(p.file) - 2), p.rank - 1])

        # Down 2, Left 1
        if(p.rank - 2 > 0 and chr(ord(p.file) - 1) > "`"):
            if(not(any((chr(ord(p.file) - 1) + str(p.rank - 2)) == (x.file + str(x.rank)) for x in self.player.pieces))):
                knightMoves.append([p.id, chr(ord(p.file) - 1), p.rank - 2])

        # Up 1, Left 2
        if(p.rank + 1 < 9 and chr(ord(p.file) - 2) > "`"):
            if(not(any((chr(ord(p.file) - 2) + str(p.rank + 1)) == (x.file + str(x.rank)) for x in self.player.pieces))):
                knightMoves.append([p.id, chr(ord(p.file) - 2), p.rank + 1])

        # Up 2, Left 1
        if(p.rank + 2 < 9 and chr(ord(p.file) - 1) > "`"):
            if(not(any((chr(ord(p.file) - 1) + str(p.rank + 2)) == (x.file + str(x.rank)) for x in self.player.pieces))):
                knightMoves.append([p.id, chr(ord(p.file) - 1), p.rank + 2])
        return knightMoves

    def moveBishop(p, self, skip=""):
        bishopMoves = []
        # These values will stop checking that direction if they find a like
        # colored piece
        up_left = True
        up_right = True
        down_left = True
        down_right = True 
        move_size = 8
        for m in range(1, move_size):
            # check to see if your own pieces are in the way.
            for w in p.owner.pieces:
                # Check up_left
                if(p.rank + m < 9 and chr(ord(p.file) - m) > "`"):
                    if(w.file == chr(ord(p.file) - m) and w.rank == p.rank + m):
                        up_left = False
                else:
                    up_left = False
                # Check up_right
                if(p.rank + m < 9 and chr(ord(p.file) + m) < "i"):
                    if(w.file == chr(ord(p.file) + m) and w.rank == p.rank + m):
                        up_right = False
                else:
                    up_right = False
                # Check down_left
                if(p.rank - m > 0 and chr(ord(p.file) - m) > "`"):
                    if(w.file == chr(ord(p.file) - m) and w.rank == p.rank - m):
                        down_left = False
                else:
                    down_left = False
                # Check down_right
                if(p.rank - m > 0 and chr(ord(p.file) + m) < "i"):
                    if(w.file == chr(ord(p.file) + m) and w.rank == p.rank - m):
                        down_right = False
                else:
                    down_right = False

            if(up_left is True):
                bishopMoves.append([p.id, chr(ord(p.file) - m), p.rank + m])
                if(any((chr(ord(p.file) - m) + str(p.rank + m)) == (x.file + str(x.rank)) for x in self.player.other_player.pieces)):
                    up_left = False
            if(up_right is True):
                bishopMoves.append([p.id, chr(ord(p.file) + m), p.rank + m])
                if(any((chr(ord(p.file) + m) + str(p.rank + m)) == (x.file + str(x.rank)) for x in self.player.other_player.pieces)):
                    up_right = False
            if(down_left is True):
                bishopMoves.append([p.id, chr(ord(p.file) - m), p.rank - m])
                if(any((chr(ord(p.file) - m) + str(p.rank - m)) == (x.file + str(x.rank)) for x in self.player.other_player.pieces)):
                    down_left = False
            if(down_right is True):
                bishopMoves.append([p.id, chr(ord(p.file) + m), p.rank - m])
                if(any((chr(ord(p.file) + m) + str(p.rank - m)) == (x.file + str(x.rank)) for x in self.player.other_player.pieces)):
                    down_right = False
                    
        return bishopMoves

    def moveKing(king, self, skip=""):
        p = king
        kingMoves = []
        up_left = True
        up_right = True
        down_left = True
        down_right = True 
        Up = True
        Down = True
        Right = True
        Left = True
        for w in p.owner.pieces:
            # Check up_left
            if(p.rank + 1 < 9 and chr(ord(p.file) - 1) > "`"):
                if(w.file == chr(ord(p.file) - 1) and w.rank == p.rank + 1):
                    up_left = False
            else:
                up_left = False
            # Check up_right
            if(p.rank + 1 < 9 and chr(ord(p.file) + 1) < "i"):
                if(w.file == chr(ord(p.file) + 1) and w.rank == p.rank + 1):
                    up_right = False
            else:
                up_right = False
            # Check down_left
            if(p.rank - 1 > 0 and chr(ord(p.file) - 1) > "`"):
                if(w.file == chr(ord(p.file) - 1) and w.rank == p.rank - 1):
                    down_left = False
            else:
                down_left = False
            # Check down_right
            if(p.rank - 1 > 0 and chr(ord(p.file) + 1) < "i"):
                if(w.file == chr(ord(p.file) + 1) and w.rank == p.rank - 1):
                    down_right = False
            else:
                down_right = False

            if(p.rank + 1 < 9):
                if(w.file == p.file and w.rank == p.rank + 1):
                    Up = False
            else:
                Up = False
            # Check for moving "Down" and not running into own color peices
            if(p.rank - 1 > 0):
                if(w.file == p.file and w.rank == p.rank - 1):
                    Down = False
            else:
                Down = False
            # Check for moving "Right" and not running into own color pieces
            if(chr(ord(p.file) + 1) < "i"):
                if(w.file == chr(ord(p.file) + 1) and w.rank == p.rank):
                    Right = False
            else:
                Right = False
            # Chcek for moving "Left" and not running into own color peices
            if(chr(ord(p.file) - 1) > "`"):
                if(w.file == chr(ord(p.file) - 1) and w.rank == p.rank):
                    Left = False
            else:
                Left = False

        if(up_left is True):
            if(AI.checkMove(p, self, king, chr(ord(p.file) - 1), p.rank + 1)):
                kingMoves.append([p.id, chr(ord(p.file) - 1), p.rank + 1])
        if(up_right is True):
            if(AI.checkMove(p, self, king, chr(ord(p.file) + 1), p.rank + 1)):
                kingMoves.append([p.id, chr(ord(p.file) + 1), p.rank + 1])
        if(down_left is True):
            if(AI.checkMove(p, self, king, chr(ord(p.file) - 1), p.rank - 1)):
                kingMoves.append([p.id, chr(ord(p.file) - 1), p.rank - 1])
        if(down_right is True):
            if(AI.checkMove(p, self, king, chr(ord(p.file) + 1), p.rank - 1)):
                kingMoves.append([p.id, chr(ord(p.file) + 1), p.rank - 1])

        if(Up is True):
            if(AI.checkMove(p, self, king, chr(ord(p.file)), p.rank + 1)):
                kingMoves.append([p.id, p.file, p.rank + 1])
        if(Down is True):
            if(AI.checkMove(p, self, king, chr(ord(p.file)), p.rank - 1)):
                kingMoves.append([p.id, p.file, p.rank - 1])
        if(Right is True):
            if(AI.checkMove(p, self, king, chr(ord(p.file) + 1), p.rank)):
                kingMoves.append([p.id, chr(ord(p.file) + 1), p.rank])
        if(Left is True):
            if(AI.checkMove(p, self, king, chr(ord(p.file) - 1), p.rank)):
                kingMoves.append([p.id, chr(ord(p.file) - 1), p.rank])

        return kingMoves

    def moveQueen(p, self, skip=""):
        queenMoves = []
        up_left = True
        up_right = True
        down_left = True
        down_right = True
        Up = True
        Down = True
        Right = True
        Left = True
        move_size = 8
        for m in range(1, move_size):
            # check to see if your own pieces are in the way.
            for w in p.owner.pieces:
                # Check up_left
                if(p.rank + m < 9 and chr(ord(p.file) - m) > "`"):
                    if(w.file == chr(ord(p.file) - m) and w.rank == p.rank + m):
                        up_left = False
                else:
                    up_left = False
                # Check up_right
                if(p.rank + m < 9 and chr(ord(p.file) + m) < "i"):
                    if(w.file == chr(ord(p.file) + m) and w.rank == p.rank + m):
                        up_right = False
                else:
                    up_right = False
                # Check down_left
                if(p.rank - m > 0 and chr(ord(p.file) - m) > "`"):
                    if(w.file == chr(ord(p.file) - m) and w.rank == p.rank - m):
                        down_left = False
                else:
                    down_left = False
                # Check down_right
                if(p.rank - m > 0 and chr(ord(p.file) + m) < "i"):
                    if(w.file == chr(ord(p.file) + m) and w.rank == p.rank - m):
                        down_right = False
                else:
                    down_right = False
                # Check for moving Up
                if(p.rank + m < 9):
                    if(w.file == p.file and w.rank == p.rank + m):
                        Up = False
                else:
                    Up = False
                # Check for moving "Down" and not running into own color peices
                if(p.rank - m > 0):
                    if(w.file == p.file and w.rank == p.rank - m):
                        Down = False
                else:
                    Down = False
                # Check for moving "Right" and not running into own color pieces
                if(chr(ord(p.file) + m) < "i"):
                    if(w.file == chr(ord(p.file) + m) and w.rank == p.rank):
                        Right = False
                else:
                    Right = False
                # Chcek for moving "Left" and not running into own color peices
                if(chr(ord(p.file) - m) > "`"):
                    if(w.file == chr(ord(p.file) - m) and w.rank == p.rank):
                        Left = False
                else:
                    Left = False

            if(up_left is True):
                queenMoves.append([p.id, chr(ord(p.file) - m), p.rank + m])
                if(any((chr(ord(p.file) - m) + str(p.rank + m)) == (x.file + str(x.rank)) for x in self.player.other_player.pieces)):
                    up_left = False
            if(up_right is True):
                queenMoves.append([p.id, chr(ord(p.file) + m), p.rank + m])
                if(any((chr(ord(p.file) + m) + str(p.rank + m)) == (x.file + str(x.rank)) for x in self.player.other_player.pieces)):
                    up_right = False
            if(down_left is True):
                queenMoves.append([p.id, chr(ord(p.file) - m), p.rank - m])
                if(any((chr(ord(p.file) - m) + str(p.rank - m)) == (x.file + str(x.rank)) for x in self.player.other_player.pieces)):
                    down_left = False
            if(down_right is True):
                queenMoves.append([p.id, chr(ord(p.file) + m), p.rank - m])
                if(any((chr(ord(p.file) + m) + str(p.rank - m)) == (x.file + str(x.rank)) for x in self.player.other_player.pieces)):
                    down_right = False
            if(Up is True):
                queenMoves.append([p.id, p.file, p.rank + m])
                if(any((chr(ord(p.file)) + str(p.rank + m)) == (x.file + str(x.rank)) for x in self.player.other_player.pieces)):
                    Up = False
            if(Down is True):
                queenMoves.append([p.id, p.file, p.rank - m])
                if(any((chr(ord(p.file)) + str(p.rank - m)) == (x.file + str(x.rank)) for x in self.player.other_player.pieces)):
                    Down = False
            if(Right is True):
                queenMoves.append([p.id, chr(ord(p.file) + m), p.rank])
                if(any((chr(ord(p.file) + m) + str(p.rank)) == (x.file + str(x.rank)) for x in self.player.other_player.pieces)):
                    Right = False
            if(Left is True):
                queenMoves.append([p.id, chr(ord(p.file) - m), p.rank])
                if(any((chr(ord(p.file) - m) + str(p.rank)) == (x.file + str(x.rank)) for x in self.player.other_player.pieces)):
                    Left = False
        return queenMoves
    

    def checkMove(p, self, king, new_file="a", new_rank=1):
        if(p.type == "King"):
            # Temporarilty change the rank and file of the piece to make it
            # "disappear"
            # tmp_rank = king._rank
            # tmp_file = king._file
            # Change the rank and file of the king to something that won't be 
            # picked up
            # king.setRank(0)
            #king.setFile(" ")

            otherMoves = []
            for o in self.player.other_player._pieces:
                if(o.type == "Pawn"):
                    # Check for Pawn attacks
                    if(o.owner.color == "Black"):
                        v = -1
                    elif(o.owner.color == "White"):
                        v = 1
                    # Check attack
                    if((chr(ord(o.file) + 1) + str(o.rank + v)) == chr(ord(new_file)) + str(new_rank)):
                        return False
                    if((chr(ord(o.file) - 1) + str(o.rank + v)) == chr(ord(new_file)) + str(new_rank)):
                        return False 
                    otherMoves.extend(AI.movePawn(o, self, p._id))
                elif(o.type == "Rook"):
                    otherMoves.extend(AI.moveRook(o, self, p._id))
                elif(o.type == "Knight"):
                    otherMoves.extend(AI.moveKnight(o, self, p._id))
                elif(o.type == "Bishop"):
                    otherMoves.extend(AI.moveBishop(o, self, p._id))
                # elif(o.type == "King"):
                    # otherMoves.extend(AI.moveKing(o, self))
                elif(o.type == "Queen"):
                    otherMoves.extend(AI.moveQueen(o, self, p._id))

            # Set the rank and file back to original
            # king.setRank(tmp_rank)
            # king.setFile(tmp_file)
            if(any((chr(ord(new_file)) + str(new_rank)) == (x[1] + str(x[2])) for x in otherMoves)):
                return False

        else:
            # Temporarily delete the piece from the list of pieces
            # tmp_rank = p._rank
            # tmp_file = p._file

            # p.setRank(0)
            # p.setFile(" ")

            otherMoves = []
            for o in self.player.other_player.pieces:
                if(o.type == "Pawn"):
                    otherMoves.extend(AI.movePawn(o, self, p._id))
                elif(o.type == "Rook"):
                    otherMoves.extend(AI.moveRook(o, self, p._id))
                elif(o.type == "Knight"):
                    otherMoves.extend(AI.moveKnight(o, self, p._id))
                elif(o.type == "Bishop"):
                    otherMoves.extend(AI.moveBishop(o, self, p._id))
                elif(o.type == "King"):
                    otherMoves.extend(AI.moveKing(o, self, p._id))
                elif(o.type == "Queen"):
                    otherMoves.extend(AI.moveQueen(o, self, p._id))
            # Add the piece back in
            # p.setRank(tmp_rank)
            # p.setFile(tmp_file)
            # If the move would result in the king being in check
            if(any((chr(ord(king.file)) + str(king.rank)) == (x[1] + str(x[2])) for x in otherMoves)):
                return False

        return True
